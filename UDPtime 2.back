/**

 Get NTP time for Patagonia

  (c) gosouth.cl
 
 */

//#define SERIAL_RX_BUFFER_SIZE 256
//#define SERIAL_TX_BUFFER_SIZE 128

#include "ESP8266.h"

#define SSID        "Online LIMS"
#define PASSWORD    "chevere42"

#define HOST_NAME   "129.6.15.28"
#define HOST_PORT    (123)                   //          (2390)

SoftwareSerial ESPserial(2, 3); // RX | TX

ESP8266 wifi(ESPserial);

const int NTP_PACKET_SIZE = 48;
byte packetBuffer[ NTP_PACKET_SIZE];

void setup(void)
{
    Serial.begin(9600);
    Serial.print("setup begin\r\n");

    Serial.print("FW Version:");
    Serial.println(wifi.getVersion().c_str());

    if (wifi.setOprToStationSoftAP()) Serial.print("to station + softap ok\r\n");
    else Serial.print("to station + softap err\r\n");

    // == connect to WLAN ============================
     
    if (wifi.joinAP(SSID, PASSWORD)) {
        Serial.print("Join AP success\r\n");

        Serial.print("IP:");
        Serial.println( wifi.getLocalIP().c_str());       
        } 
    else Serial.print("Join AP failure\r\n");

    // == disable MUX, only one TCP or UDP communication can be builded 
    
    if (wifi.disableMUX()) Serial.print("single ok\r\n");
    else Serial.print("single err\r\n");

    // == build NTP packet 

    memset(packetBuffer, 0, NTP_PACKET_SIZE);
    packetBuffer[0] = 0b11100011;   // LI, Version, Mode
    packetBuffer[1] = 0;     // Stratum, or type of clock
    packetBuffer[2] = 6;     // Polling Interval
    packetBuffer[3] = 0xEC;  // Peer Clock Precision
    // 8 bytes of zero for Root Delay & Root Dispersion
    packetBuffer[12]  = 49;
    packetBuffer[13]  = 0x4E;
    packetBuffer[14]  = 49;
    packetBuffer[15]  = 52;

    
    Serial.println("setup end");    
    Serial.println("===========\n\r");
}

// == time functions ========================================

//this is a list of int variables used in this clock program

int s=0;
int sec=0;
int hrs=0;
int minutes=0;

int initialHours = 0;   //variable to initiate hours
int initialMins = 0;    //variable to initiate minutes
int initialSecs = 0;    //variable to initiate seconds

unsigned long epoch;

//this method is for seconds

int seconds()
{
 //   s = initialHours*3600;
 //   s = s+(initialMins*60);
//    s = s+initialSecs;
    
    s = s+(millis()/1000);
    return s;
}

//this method is for hours
int hours()
{
    hrs = seconds();
    hrs = hrs/3600;
    hrs = hrs%24;
    return hrs;
}

//this method is for minutes
int mins()
{
    minutes = seconds();
    minutes = minutes/60;
    minutes = minutes%60;
    return minutes;
}

int secs()
{
    sec = seconds();
    sec = sec%60;
    return sec;
}


// == main loop ============================================================

void getTime(void);

int nLoop =10;

void loop(void)
{

    if( nLoop++ == 10 ) { 
        getTime();
        nLoop = 0;
    }
    else epoch++;
        
    //epoch = epoch+(millis()/1000);

     // print the hour, minute and second:
    Serial.print("The UTC time is ");       // UTC is the time at Greenwich Meridian (GMT)
    Serial.print((epoch  % 86400L) / 3600); // print the hour (86400 equals secs per day)
    Serial.print(':');
    
    if (((epoch % 3600) / 60) < 10) {
        // In the first 10 minutes of each hour, we'll want a leading '0'
        Serial.print('0');
    }
    
    Serial.print((epoch  % 3600) / 60);     // print the minute (3600 equals secs per minute)
    Serial.print(':');
    if ((epoch % 60) < 10) {
        // In the first 10 seconds of each minute, we'll want a leading '0'
        Serial.print('0');
    }
    
    Serial.println(epoch % 60);     // print the second  
    
    delay(1000);
}

void getTime()
{

    uint8_t buffer[128] = {0};

    if (wifi.registerUDP(HOST_NAME, HOST_PORT)) Serial.print("register udp ok\r\n");
    else Serial.print("register udp err\r\n");

    // == sent NTP packet 
    wifi.send( packetBuffer, NTP_PACKET_SIZE );
    
    uint32_t len = wifi.recv(packetBuffer, NTP_PACKET_SIZE, 10000);
    
    //get time
    
    if (wifi.unregisterUDP()) Serial.print("unregister udp ok\r\n");
    else Serial.print("unregister udp err\r\n");
        
    //the timestamp starts at byte 40 of the received packet and is four bytes,
    // or two words, long. First, esxtract the two words:
    
    unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
    unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);
    // combine the four bytes (two words) into a long integer
    // this is NTP time (seconds since Jan 1 1900):
    
    unsigned long secsSince1900 = highWord << 16 | lowWord;
    Serial.print("Seconds since Jan 1 1900 = ");
    
    Serial.println(secsSince1900);
    
    // now convert NTP time into everyday time:
    // Serial.print("Unix time = ");
    // Unix time starts on Jan 1 1970. In seconds, that's 2208988800:
    
    const unsigned long seventyYears = 2208988800UL;
    // subtract seventy years:
    
    epoch = secsSince1900 - seventyYears;
    epoch -= 3600*3;        // chilean time zone
    
    // print Unix time:
    //Serial.println(epoch);

  /*   
    // print the hour, minute and second:
    Serial.print("The UTC time is ");       // UTC is the time at Greenwich Meridian (GMT)
    Serial.print((epoch  % 86400L) / 3600); // print the hour (86400 equals secs per day)
    Serial.print(':');
    
    if (((epoch % 3600) / 60) < 10) {
        // In the first 10 minutes of each hour, we'll want a leading '0'
        Serial.print('0');
    }
    
    Serial.print((epoch  % 3600) / 60);     // print the minute (3600 equals secs per minute)
    Serial.print(':');
    if ((epoch % 60) < 10) {
        // In the first 10 seconds of each minute, we'll want a leading '0'
        Serial.print('0');
    }
    
    Serial.println(epoch % 60);     // print the second  
*/
}

